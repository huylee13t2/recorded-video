{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar Recorder = _react2.default.createClass({\n  displayName: 'Recorder',\n  start: function start() {\n    this.mediaRecorder.start();\n  },\n  stop: function stop() {\n    this.mediaRecorder.stop();\n  },\n  pause: function pause() {\n    this.mediaRecorder.pause();\n  },\n  resume: function resume() {\n    this.mediaRecorder.resume();\n  },\n  componentDidMount: function componentDidMount() {\n    var _this = this;\n\n    navigator.getUserMedia = navigator.getUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia || navigator.webkitGetUserMedia;\n\n    if (navigator.getUserMedia && window.MediaRecorder) {\n      (function () {\n        var constraints = {\n          audio: true\n        };\n        _this.chunks = [];\n        var _props = _this.props;\n        var blobOpts = _props.blobOpts;\n        var onStop = _props.onStop;\n        var onError = _props.onError;\n        var mediaOpts = _props.mediaOpts;\n        var onPause = _props.onPause;\n        var onResume = _props.onResume;\n        var onStart = _props.onStart;\n        var gotStream = _props.gotStream;\n\n        var onErr = function onErr(err) {\n          console.warn(err);\n          if (onError) onError(err);\n        };\n\n        var onSuccess = function onSuccess(stream) {\n          _this.mediaRecorder = new window.MediaRecorder(stream, mediaOpts || {});\n\n          _this.mediaRecorder.ondataavailable = function (e) {\n            _this.chunks.push(e.data);\n          };\n\n          _this.mediaRecorder.onstop = function (e) {\n            var blob = new window.Blob(_this.chunks, blobOpts || {\n              type: 'audio/wav'\n            });\n            _this.chunks = [];\n            onStop(blob);\n          };\n\n          _this.mediaRecorder.onerror = onErr;\n          if (onPause) _this.mediaRecorder.onpause = onPause;\n          if (onResume) _this.mediaRecorder.onresume = onResume;\n          if (onStart) _this.mediaRecorder.onstart = onStart;\n          _this.stream = stream;\n          if (gotStream) gotStream(stream);\n        };\n\n        navigator.getUserMedia(constraints, onSuccess, onErr);\n      })();\n    } else {\n      console.warn('Audio recording APIs not supported by this browser');\n      var onMissingAPIs = this.props.onMissingAPIs;\n\n      if (onMissingAPIs) {\n        onMissingAPIs(navigator.getUserMedia, window.MediaRecorder);\n      } else {\n        window.alert('Your browser doesn\\'t support native microphone recording. For best results, we recommend using Google Chrome or Mozilla Firefox to use this site.');\n      }\n    }\n  },\n  componentDidUpdate: function componentDidUpdate(prevProps) {\n    if (this.props.command && this.props.command !== 'none' && prevProps.command !== this.props.command) {\n      this[this.props.command]();\n    }\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    if (this.props.onUnmount) this.props.onUnmount(this.stream);\n  },\n  render: function render() {\n    return false;\n  },\n  propTypes: {\n    command: _react.PropTypes.oneOf(['start', 'stop', 'pause', 'resume', 'none']),\n    onStop: _react.PropTypes.func.isRequired,\n    onMissingAPIs: _react.PropTypes.func,\n    onError: _react.PropTypes.func,\n    onPause: _react.PropTypes.func,\n    onStart: _react.PropTypes.func,\n    onResume: _react.PropTypes.func,\n    onUnmount: _react.PropTypes.func,\n    gotStream: _react.PropTypes.func,\n    blobOpts: _react.PropTypes.object,\n    mediaOpts: _react.PropTypes.object\n  }\n});\n\nexports.default = Recorder;","map":null,"metadata":{},"sourceType":"script"}